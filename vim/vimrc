" vim:foldmethod=marker
set encoding=utf-8

" OPTIONS {{{
"
set expandtab                           " expand tabs to spaces
set tabstop=4                           " number of spaces to display for each tab character
set softtabstop=4                       " number of spaces a typing a tab counts for in editing
set shiftwidth=4                        " number of spaces to use per step of indent

set foldmethod=syntax                   " define folds using language syntax
set autoindent                          " duplicate indentation from previous line
set backspace=indent,eol,start          " allow backspace in all contexts
set formatprg="PARINIT='rTbgqR B=.,?_A_a Q=_s>|' par\ -w72" " Prettier line formatting

set nu                                  " show line numbers
set cursorline                          " highight line of current cursor
set colorcolumn=80                      " highlight column/s
set listchars=tab:>\ ,eol:Â¬             " symbols with which to display whitespace
set scrolloff=3                         " always display three lines above/below cursor
set ruler                               " display line,col of cursor on statusbar
set showcmd                             " show command in progress on last line
set laststatus=2                        " display a statusbar on all windows
set modeline                            " detect modelines
set modelines=1                         " how many lines to check for modelines
set ttyfast                             " use a 'fast' terminal connection
set lazyredraw                          " don't redraw window during macro execution
set splitright                          " open new vertical splits on the right
set splitbelow                          " open new horizontal splits on the bottom
set autoread                            " automatically read changed files

set magic                               " enable regex searching
set smartcase                           " ignore case unless search has caps
set hlsearch                            " highlight search matches
set incsearch                           " highlight matches as they're typed

set wildmenu                            " Activate the wildmenu for filenames
set wildmode=list:longest,full          " Tab-complete files up to longest unambiguous prefix
set mouse=a                             " Turn the mouse on

set undofile                            " save undo history for each file
set undodir=~/.vim/tmp/undo//           " store undofiles in unobtrusive location
set dir=~/.vim/tmp/swap//               " store swapfiles in unobtrusive location
set viminfo^=%
set completeopt+=longest                " only match to longest common text

set t_Co=256
set bg=light
colo bclear


" Deactivate annoying search mappings in less mode
if exists("loaded_less")
    set bg=light
    set nolist
    colo dejavu
    unmap /
    unmap n
    unmap N
endif

" }}}


" PLUGINS {{{
"
execute pathogen#infect()
call pathogen#helptags()

runtime! ftplugin/man.vim

filetype plugin indent on
syntax enable

" Solarized {{{
" }}}

" Ctrlp {{{
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
" }}}

" Clam {{{
let g:clam_winpos = 'bel'
" }}}

" Airline {{{
let g:airline_powerline_fonts=1
let g:airline_theme='zenburn'
" }}} (airline)

" }}} (PLUGINS)


" FUNCTIONS {{{

" s:setInterpreter: Choose an interpreter command {{{
"   for the file to be called from the <leader>z " and <leader>Z keymaps
function! s:setInterpreter()

    let oldic=&ignorecase
    set ignorecase

    " filetype -> [ repl_command, exec_command ]
    let repls = {
        \ "python":   [ "!python -i %", "!python %" ],
        \ "bash":     [ "!bash --rcfile %", "!bash %" ],
        \ "sh":       [ "!bash --rcfile %", "!bash %" ],
        \ "haskell":  [ "!ghci %", "!runghc %" ],
        \ "lhaskell": [ "!ghci %", "!runghc %" ],
        \ }

    if has_key(repls, &filetype)
        let b:repl = repls[&filetype][0]
        let b:exec = repls[&filetype][1]
    else
        let b:repl = "echo \"unknown interpretor for filetype (\" . &filetype . \")\""
        let b:exec = "echo \"unknown interpretor for filetype (\" . &filetype . \")\""
    endif

    let &ignorecase=oldic
endfunction " }}}

" s:setWinSize: sets the winheight, winminheight, and winwidth {{{
"   to values that make sense with the terminal size
function! s:adjustWinSize()
    " usable_height = (total lines) - (wincount statuslines) -  (command line)
    let usable_height = &lines - winnr('$') - 2
    set winwidth=20

    if winnr('$') == 1 || usable_height <= 30
        set winheight=1
        set winminheight=1
        return
    else
        set winheight=30
    endif

    " Try as I may, the relationship between the maximum value of winminheight
    " that vim will take without complaining, and the actual amount of lines
    " remaining, remains completely unclear. So we'll adjust down until we get
    " a yes
    let c = 10
    while c > 1
        try
            let &winminheight=c
            break
        catch /E36:/
            let c -= 1
        endtry
    endwhile
endfunction " }}}

" D-leet that annoying trailing writespace " {{{
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc " }}}

" Helper for VisualSelection {{{
function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction " }}}

" Search forward or backward for visual selection {{{
function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction " }}}

" Fill quickfix list with committed files {{{
function! CommittedFiles()
  " Clear quickfix list
  let qf_list = []
  " Find files committed in HEAD
  let git_output = system("git diff-tree --no-commit-id --name-only -r HEAD\n")
  for committed_file in split(git_output, "\n")
    let qf_item = {'filename': committed_file}
    call add(qf_list, qf_item)
  endfor
  " Fill quickfix list with them
  call setqflist(qf_list, '')
endfunction " }}}

" Hide messy Ggrep output and copen automatically {{{
function! NonintrusiveGitGrep(term)
  execute "copen"
  " Map 't' to open selected item in new tab
  execute "nnoremap <silent> <buffer> t <C-W><CR><C-W>T"
  execute "silent! Ggrep " . a:term
  execute "redraw!"
endfunction " }}}

" }}} (FUNCTIONS)


" KEYMAPS {{{

" Currently taken leader keys: <space>VWZablpuvwxz
"   Prefix c: bfnlp
"   Prefix f: cCoO
"   Prefix g: sdb?g
"   Prefix m: ao
"   Prefix r: rsv
"   Prefix t: tTmM
let mapleader=","
let maplocalleader="\\"

" FASTER NAVIGATION! {{{
" navigate windows with <c-{h,j,k,l}>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" simplify navigation on wrapped lines
nnoremap j gj
nnoremap k gk
" Use + and - to resize current window
map + <C-W>+
map - <C-W>-
" Turns out the original use of semicolon is pretty damn useful (it repeats the last
" f, F, t, or T command, which I use a lot)
nnoremap g. ;
" The default use of , is similarly useful (repeats in opposite direction)
nnoremap gm ,
" }}}

" FASTER SEARCHING! {{{
" ctrlp buffer search
nnoremap <leader>p :CtrlPBuffer<cr>
" deactivate search highlighing
nnoremap <leader><space> :nohlsearch<cr>
" search with da-cscope
nnoremap <silent> <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>
" quick searches from visual mode
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>
" }}}

" FASTER FOLDING! {{{
" these maps are for use only if foldmethod=marker
" open/close a fold on the next line
nnoremap <leader>fo :execute "normal! o" . b:comment_prefix . "{{{"<esc>
nnoremap <leader>fc :execute "normal! o" . b:comment_prefix . "}}}"<esc>
" open/close a fold at the end of the current line
nnoremap <leader>fO :execute "normal! A " . b:comment_prefix . "{{{"<esc>
nnoremap <leader>fC :execute "normal! A " . b:comment_prefix . "}}}"<esc>
" }}}

" FASTER MODE SELECTION! {{{
" normal mode with jk
inoremap jk <Esc>
" semicolon to enter command line
nnoremap ; :
" get to ex mode (I have Q mapped elsewhere)
nnoremap <leader>Q Q
" }}}

" COMMON EDITS, WITH SPEED! {{{
" Enter and S-Enter insert a line below/above cursor
map <CR> o<Esc>
" Swap the case of a word or line
nnoremap <leader>u bgUwA
inoremap <c-u> <esc>bgUwA
" Make strings easily
inoremap qv ""<esc>i
" Paste the current line to the one below it
nnoremap g- :m+1<cr>
" activate the q macro with Q (also prevents accidentally entering ex mode)
nnoremap Q @q
" Line shit up doe
nnoremap <Leader>a :Align 
" }}}

" USEFUL TOGGLES! {{{
" Open/close folds with spacebar
nnoremap <space> za
" switch tabstop style
nnoremap <leader>tt :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<cr>
nnoremap <leader>tT :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<cr>
nnoremap <leader>tm :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<cr>
nnoremap <leader>tM :set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
" turn of listchars
nnoremap <leader>l :set list!<cr>
" toggle wrapping (and display current wrapping status)
nnoremap <leader>W :setlocal wrap!<cr>:setlocal wrap?<cr>
" Force redraw
nnoremap <silent> <leader>rr :redraw!<cr>
" Toggle mouse mode
nnoremap <leader>ma :set mouse=a<cr>
nnoremap <leader>mo :set mouse=<cr>
" switching colors iz cool
nnoremap <leader>cb :SCROLL<cr>
nnoremap <leader>cn :NEXTCOLOR<cr>
nnoremap <leader>cp :PREVCOLOR<cr>
nnoremap <leader>cl :exe "colorscheme " . getline('.')<cr>
nnoremap <leader>cf :sp ~/.vim/fav-colors<cr>
" }}}

" INTERACT WITH THE WORLD! {{{
" Use %% to refer to directory of current file on command line
cnoremap %% <C-R>=expand('%:h').'/'<cr>
" open python repl
map <leader>x :!python<cr>
" open interpreter for file
map <leader>z :execute b:repl<cr>
map <leader>Z :execute b:exec<cr>
" edit .vimrc
nnoremap <leader>v mP:e $MYVIMRC<CR>
nnoremap <leader>V :so $MYVIMRC<CR>`P
" Save as sudo from nonsudo buffer
nnoremap <leader>w :w !sudo tee %<cr>
" Send stuff off to tmux (via slime)
vnoremap <silent> <Leader>rs <Plug>SendSelectionToTmux
nnoremap <silent> <Leader>rs <Plug>NormalModeSendToTmux
nnoremap <silent> <Leader>rv <Plug>SetTmuxVars
" }}} (interact...)

" BOLDLY COMMIT TO GIT! {{{
" Reggo commands
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gb :Gblame<CR>
" Check the functions sections for x-planations of these
nnoremap <silent> <leader>g? :call CommittedFiles()<CR>:copen<CR>
command! -nargs=1 GGrep call NonintrusiveGitGrep(<q-args>)
nmap <leader>gg :copen<CR>:GGrep 
" }}}

" }}} (KEYMAPS)


" AUTOCMDS {{{

" filetype detection corrections
augroup ft "{{{
    au!
    au BufNewFile,BufReadPost cakefile,Cakefile set filetype=coffee
    au BufNewFile,BufReadPost *.json set filetype=javascript
    au Bufnewfile,Bufreadpost *.m set filetype=objc
    au Bufnewfile,Bufreadpost *.md set filetype=markdown
    au Bufnewfile,Bufreadpost *.nix set filetype=nix
augroup END "}}}

" Really, these are default settings, but they're guarded by the BufWinEnter
" event to prevent vim from complaining about window size when opened in a
" small terminal
augroup wsize "{{{
    au!
    au BufWinEnter * call s:adjustWinSize()
augroup END "}}}

augroup golang "{{{
    au!
    au FileType go iabbrev pkm package main
    au FileType go inoremap fcm func main() {<cr>}<esc>ko
augroup END "}}}

augroup html "{{{
    au!
    au FileType html inoremap abdoc <!DOCTYPE html>
    au FileType html inoremap abchar <meta charset="utf=8">
    au FileType html inoremap abjs <script type="text/javascript" src=""></script><esc>F"i
    au FileType html inoremap abcss <link rel="stylesheet" href="" /><esc>F"i
    au FileType html inoremap abtitle <title></title><esc>F<i
    au FileType html inoremap abhref <a href=""></a><esc>F"i
    au FileType html inoremap abhtml <html><CR></html><esc>ko
    au FileType html inoremap abhead <head><CR></head><esc>ko
    au FileType html inoremap abbody <body><CR></body><esc>ko
    au FileType html inoremap abdiv <div><CR></div><esc>ko
    au FileType html inoremap abform <form><CR></form><esc>ko
    au FileType html inoremap abspan <span><CR></span><esc>ko
    au FileType html inoremap abstyle <style><CR></style><esc>ko
    au FileType html inoremap abpa <p><CR></p><esc>ko
augroup END "}}}

augroup whitespace "{{{
  au!
  au BufWrite *.hs,*.py :call DeleteTrailingWS()
augroup END "}}}

augroup twospace "{{{
    au!
    au FileType html,javascript,ruby,coffee,jade set softtabstop=2
    au FileType html,javascript,ruby,coffee,jade set tabstop=2
    au FileType html,javascript,ruby,coffee,jade set shiftwidth=2
augroup END "}}}

augroup last_edit "{{{
    " Return to last edit position when opening files
    autocmd!
    autocmd BufReadPost *
         \ if line("'\"") > 0 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif
augroup END " }}}

augroup commentstyle "{{{
    au!
    au FileType python,ruby,sh,zsh,bash,coffee      let b:comment_prefix="# "
    au FileType c,cpp,java,javascript               let b:comment_prefix="// "
    au FileType haskell,lua                         let b:comment_prefix="-- "
    au FileType sql                                 let b:comment_prefix="; "
    au FileTYpe vim                                 let b:comment_prefix="\" "
augroup END "}}}

augroup vimrc "{{{
  au!
  au BufWritePost .vimrc source $MYVIMRC
augroup END "}}}

augroup misc "{{{
    au!
    " call setInterpreter once FileType is known
    au FileType * call s:setInterpreter()
    " indentation based folding for several langs
    au FileType coffee,ruby,lua set foldmethod=indent
    " deactivate colorcolumn for man page
    au FileType man set cc=0
    " some poorly written color schemes fuck up the termcolors setting
    au ColorScheme * set t_Co=256
augroup END "}}}

" }}}


" SPELLING {{{
iab functino function
" }}}


" LOCAL SETTINGS {{{
if filereadable(glob("~/.vimrc-local"))
    source ~/.vimrc-local
endif
" }}}

